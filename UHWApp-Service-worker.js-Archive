const CACHE_NAME = 'upper-haugh-weather-v2'; // Increment cache version for updates
const urlsToCache = [
    '/weather-frontend/index.html',
    '/weather-frontend/manifest.json',
    '/weather-frontend/service-worker.js', // Cache the service worker itself
    '/weather-frontend/assets/clear.jpg',
    '/weather-frontend/assets/partly.jpg',
    '/weather-frontend/assets/clouds.jpg',
    '/weather-frontend/assets/rain.jpg',
    '/weather-frontend/assets/snow.jpg',
    // Add PWA icons - IMPORTANT: You need to create these image files!
    '/weather-frontend/assets/icon-192x192.png',
    '/weather-frontend/assets/icon-512x512.png',
    'https://cdn.tailwindcss.com',
    'https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap',
    'https://fonts.gstatic.com/s/inter/v13/UcC73FwrK3iLTeHuS_fvQtMwCp50KnMa1ZL7W0Q5nw.woff2' // Example fon>
];

self.addEventListener('install', event => {
    event.waitUntil(
        caches.open(CACHE_NAME)
            .then(cache => {
                console.log('Service Worker: Opened cache');
                return cache.addAll(urlsToCache);
            })
            .catch(error => {
                console.error('Service Worker: Cache addAll failed:', error);
            })
    );
});

self.addEventListener('fetch', event => {
    event.respondWith(
        caches.match(event.request)
            .then(response => {
                // Cache hit - return response
                if (response) {
                    return response;
                }
                // If not in cache, fetch from network
                return fetch(event.request).then(
                    function(response) {
                        // Check if we received a valid response
                        if(!response || response.status !== 200 || response.type !== 'basic') {
                            return response;
                        }

                        // IMPORTANT: Clone the response. A response is a stream
                        // and can only be consumed once. We must clone it so that
                        // the browser can consume the original response and we can
                        // consume the clone.
                        var responseToCache = response.clone();

                        caches.open(CACHE_NAME)
                            .then(function(cache) {
                                cache.put(event.request, responseToCache);
                            });

                        return response;
                    }
                ).catch(error => {
                    console.error('Service Worker: Fetch failed:', error);
                    // You can return a fallback page here for offline experience
                    // return caches.match('/weather-frontend/offline.html');
                });
            })
    );
});

self.addEventListener('activate', event => {
    const cacheWhitelist = [CACHE_NAME];
    event.waitUntil(
        caches.keys().then(cacheNames => {
            return Promise.all(
                cacheNames.map(cacheName => {
                    if (cacheWhitelist.indexOf(cacheName) === -1) {
                        console.log('Service Worker: Deleting old cache:', cacheName);
                        return caches.delete(cacheName);
                    }
                })
            );
        })
    );
});